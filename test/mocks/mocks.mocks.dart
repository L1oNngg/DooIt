// Mocks generated by Mockito 5.4.6 from annotations
// in dooit/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dooit/domain/entities/task.dart' as _i4;
import 'package:dooit/domain/usecases/create_task_use_case.dart' as _i5;
import 'package:dooit/domain/usecases/delete_task_use_case.dart' as _i7;
import 'package:dooit/domain/usecases/get_all_tasks_use_case.dart' as _i2;
import 'package:dooit/domain/usecases/update_task_use_case.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetAllTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTasksUseCase extends _i1.Mock
    implements _i2.GetAllTasksUseCase {
  MockGetAllTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Task>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
          )
          as _i3.Future<List<_i4.Task>>);
}

/// A class which mocks [CreateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTaskUseCase extends _i1.Mock implements _i5.CreateTaskUseCase {
  MockCreateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#call, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i6.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#call, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [DeleteTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskUseCase extends _i1.Mock implements _i7.DeleteTaskUseCase {
  MockDeleteTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#call, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
